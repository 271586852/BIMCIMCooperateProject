{
  "version": 3,
  "sources": ["../../@here/quantized-mesh-decoder/src/index.js"],
  "sourcesContent": ["const QUANTIZED_MESH_HEADER = new Map([\r\n  ['centerX', Float64Array.BYTES_PER_ELEMENT],\r\n  ['centerY', Float64Array.BYTES_PER_ELEMENT],\r\n  ['centerZ', Float64Array.BYTES_PER_ELEMENT],\r\n\r\n  ['minHeight', Float32Array.BYTES_PER_ELEMENT],\r\n  ['maxHeight', Float32Array.BYTES_PER_ELEMENT],\r\n\r\n  ['boundingSphereCenterX', Float64Array.BYTES_PER_ELEMENT],\r\n  ['boundingSphereCenterY', Float64Array.BYTES_PER_ELEMENT],\r\n  ['boundingSphereCenterZ', Float64Array.BYTES_PER_ELEMENT],\r\n  ['boundingSphereRadius', Float64Array.BYTES_PER_ELEMENT],\r\n\r\n  ['horizonOcclusionPointX', Float64Array.BYTES_PER_ELEMENT],\r\n  ['horizonOcclusionPointY', Float64Array.BYTES_PER_ELEMENT],\r\n  ['horizonOcclusionPointZ', Float64Array.BYTES_PER_ELEMENT]\r\n])\r\n\r\nfunction decodeZigZag (value) {\r\n  return (value >> 1) ^ (-(value & 1))\r\n}\r\n\r\nfunction decodeHeader (dataView) {\r\n  let position = 0\r\n  const header = {}\r\n\r\n  for (let [key, bytesCount] of QUANTIZED_MESH_HEADER) {\r\n    const getter = bytesCount === 8 ? dataView.getFloat64 : dataView.getFloat32\r\n\r\n    header[key] = getter.call(dataView, position, true)\r\n    position += bytesCount\r\n  }\r\n\r\n  return { header, headerEndPosition: position }\r\n}\r\n\r\nfunction decodeVertexData (dataView, headerEndPosition) {\r\n  let position = headerEndPosition\r\n  const elementsPerVertex = 3\r\n  const vertexCount = dataView.getUint32(position, true)\r\n  const vertexData = new Uint16Array(vertexCount * elementsPerVertex)\r\n\r\n  position += Uint32Array.BYTES_PER_ELEMENT\r\n\r\n  const bytesPerArrayElement = Uint16Array.BYTES_PER_ELEMENT\r\n  const elementArrayLength = vertexCount * bytesPerArrayElement\r\n  const uArrayStartPosition = position\r\n  const vArrayStartPosition = uArrayStartPosition + elementArrayLength\r\n  const heightArrayStartPosition = vArrayStartPosition + elementArrayLength\r\n\r\n  let u = 0\r\n  let v = 0\r\n  let height = 0\r\n\r\n  for (let i = 0; i < vertexCount; i++) {\r\n    u += decodeZigZag(dataView.getUint16(uArrayStartPosition + bytesPerArrayElement * i, true))\r\n    v += decodeZigZag(dataView.getUint16(vArrayStartPosition + bytesPerArrayElement * i, true))\r\n    height += decodeZigZag(dataView.getUint16(heightArrayStartPosition + bytesPerArrayElement * i, true))\r\n\r\n    vertexData[i] = u\r\n    vertexData[i + vertexCount] = v\r\n    vertexData[i + vertexCount * 2] = height\r\n  }\r\n\r\n  position += elementArrayLength * 3\r\n\r\n  return { vertexData, vertexDataEndPosition: position }\r\n}\r\n\r\nfunction decodeIndex (buffer, position, indicesCount, bytesPerIndex, encoded = true) {\r\n  let indices\r\n\r\n  if (bytesPerIndex === 2) {\r\n    indices = new Uint16Array(buffer, position, indicesCount)\r\n  } else {\r\n    indices = new Uint32Array(buffer, position, indicesCount)\r\n  }\r\n\r\n  if (!encoded) {\r\n    return indices\r\n  }\r\n\r\n  let highest = 0\r\n\r\n  for (let i = 0; i < indices.length; ++i) {\r\n    let code = indices[i]\r\n\r\n    indices[i] = highest - code\r\n\r\n    if (code === 0) {\r\n      ++highest\r\n    }\r\n  }\r\n\r\n  return indices\r\n}\r\n\r\nfunction decodeTriangleIndices (dataView, vertexData, vertexDataEndPosition) {\r\n  let position = vertexDataEndPosition\r\n  const elementsPerVertex = 3\r\n  const vertexCount = vertexData.length / elementsPerVertex\r\n  const bytesPerIndex = vertexCount > 65536\r\n    ? Uint32Array.BYTES_PER_ELEMENT\r\n    : Uint16Array.BYTES_PER_ELEMENT\r\n\r\n  if (position % bytesPerIndex !== 0) {\r\n    position += bytesPerIndex - (position % bytesPerIndex)\r\n  }\r\n\r\n  const triangleCount = dataView.getUint32(position, true)\r\n  position += Uint32Array.BYTES_PER_ELEMENT\r\n\r\n  const triangleIndicesCount = triangleCount * 3\r\n  const triangleIndices = decodeIndex(\r\n    dataView.buffer,\r\n    position,\r\n    triangleIndicesCount,\r\n    bytesPerIndex\r\n  )\r\n  position += triangleIndicesCount * bytesPerIndex\r\n\r\n  return {\r\n    triangleIndicesEndPosition: position,\r\n    triangleIndices\r\n  }\r\n}\r\n\r\nfunction decodeEdgeIndices (dataView, vertexData, triangleIndicesEndPosition) {\r\n  let position = triangleIndicesEndPosition\r\n  const elementsPerVertex = 3\r\n  const vertexCount = vertexData.length / elementsPerVertex\r\n  const bytesPerIndex = vertexCount > 65536\r\n    ? Uint32Array.BYTES_PER_ELEMENT\r\n    : Uint16Array.BYTES_PER_ELEMENT\r\n\r\n  const westVertexCount = dataView.getUint32(position, true)\r\n  position += Uint32Array.BYTES_PER_ELEMENT\r\n\r\n  const westIndices = decodeIndex(dataView.buffer, position, westVertexCount, bytesPerIndex, false)\r\n  position += westVertexCount * bytesPerIndex\r\n\r\n  const southVertexCount = dataView.getUint32(position, true)\r\n  position += Uint32Array.BYTES_PER_ELEMENT\r\n\r\n  const southIndices = decodeIndex(dataView.buffer, position, southVertexCount, bytesPerIndex, false)\r\n  position += southVertexCount * bytesPerIndex\r\n\r\n  const eastVertexCount = dataView.getUint32(position, true)\r\n  position += Uint32Array.BYTES_PER_ELEMENT\r\n\r\n  const eastIndices = decodeIndex(dataView.buffer, position, eastVertexCount, bytesPerIndex, false)\r\n  position += eastVertexCount * bytesPerIndex\r\n\r\n  const northVertexCount = dataView.getUint32(position, true)\r\n  position += Uint32Array.BYTES_PER_ELEMENT\r\n\r\n  const northIndices = decodeIndex(dataView.buffer, position, northVertexCount, bytesPerIndex, false)\r\n  position += northVertexCount * bytesPerIndex\r\n\r\n  return {\r\n    edgeIndicesEndPosition: position,\r\n    westIndices,\r\n    southIndices,\r\n    eastIndices,\r\n    northIndices\r\n  }\r\n}\r\n\r\nfunction decodeVertexNormalsExtension (extensionDataView) {\r\n  return new Uint8Array(\r\n    extensionDataView.buffer, extensionDataView.byteOffset, extensionDataView.byteLength\r\n  )\r\n}\r\n\r\nfunction decodeWaterMaskExtension (extensionDataView) {\r\n  return extensionDataView.buffer.slice(\r\n    extensionDataView.byteOffset,\r\n    extensionDataView.byteOffset + extensionDataView.byteLength\r\n  )\r\n}\r\n\r\nfunction decodeMetadataExtension (extensionDataView) {\r\n  const jsonLength = extensionDataView.getUint32(0, true)\r\n\r\n  let jsonString = ''\r\n  for (let i = 0; i < jsonLength; ++i) {\r\n    jsonString += String.fromCharCode(extensionDataView.getUint8(Uint32Array.BYTES_PER_ELEMENT + i))\r\n  }\r\n\r\n  return JSON.parse(jsonString)\r\n}\r\n\r\nfunction decodeExtensions (dataView, indicesEndPosition) {\r\n  const extensions = {}\r\n\r\n  if (dataView.byteLength <= indicesEndPosition) {\r\n    return { extensions, extensionsEndPosition: indicesEndPosition }\r\n  }\r\n\r\n  let position = indicesEndPosition\r\n\r\n  while (position < dataView.byteLength) {\r\n    const extensionId = dataView.getUint8(position, true)\r\n    position += Uint8Array.BYTES_PER_ELEMENT\r\n\r\n    const extensionLength = dataView.getUint32(position, true)\r\n    position += Uint32Array.BYTES_PER_ELEMENT\r\n\r\n    const extensionView = new DataView(dataView.buffer, position, extensionLength)\r\n\r\n    switch (extensionId) {\r\n      case 1: {\r\n        extensions.vertexNormals = decodeVertexNormalsExtension(extensionView)\r\n\r\n        break\r\n      }\r\n      case 2: {\r\n        extensions.waterMask = decodeWaterMaskExtension(extensionView)\r\n\r\n        break\r\n      }\r\n      case 4: {\r\n        extensions.metadata = decodeMetadataExtension(extensionView)\r\n\r\n        break\r\n      }\r\n      default: {\r\n        console.warn(`Unknown extension with id ${extensionId}`)\r\n      }\r\n    }\r\n\r\n    position += extensionLength\r\n  }\r\n\r\n  return { extensions, extensionsEndPosition: position }\r\n}\r\n\r\nexport const DECODING_STEPS = {\r\n  header: 0,\r\n  vertices: 1,\r\n  triangleIndices: 2,\r\n  edgeIndices: 3,\r\n  extensions: 4\r\n}\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  maxDecodingStep: DECODING_STEPS.extensions\r\n}\r\n\r\nexport default function decode (data, userOptions) {\r\n  const options = Object.assign({}, DEFAULT_OPTIONS, userOptions)\r\n  const view = new DataView(data)\r\n  const { header, headerEndPosition } = decodeHeader(view)\r\n\r\n  if (options.maxDecodingStep < DECODING_STEPS.vertices) {\r\n    return { header }\r\n  }\r\n\r\n  const { vertexData, vertexDataEndPosition } = decodeVertexData(view, headerEndPosition)\r\n\r\n  if (options.maxDecodingStep < DECODING_STEPS.triangleIndices) {\r\n    return { header, vertexData }\r\n  }\r\n\r\n  const {\r\n    triangleIndices,\r\n    triangleIndicesEndPosition\r\n  } = decodeTriangleIndices(view, vertexData, vertexDataEndPosition)\r\n\r\n  if (options.maxDecodingStep < DECODING_STEPS.edgeIndices) {\r\n    return { header, vertexData, triangleIndices }\r\n  }\r\n\r\n  const {\r\n    westIndices,\r\n    southIndices,\r\n    eastIndices,\r\n    northIndices,\r\n    edgeIndicesEndPosition\r\n  } = decodeEdgeIndices(view, vertexData, triangleIndicesEndPosition)\r\n\r\n  if (options.maxDecodingStep < DECODING_STEPS.extensions) {\r\n    return {\r\n      header,\r\n      vertexData,\r\n      triangleIndices,\r\n      westIndices,\r\n      northIndices,\r\n      eastIndices,\r\n      southIndices\r\n    }\r\n  }\r\n\r\n  const { extensions } = decodeExtensions(view, edgeIndicesEndPosition)\r\n\r\n  return {\r\n    header,\r\n    vertexData,\r\n    triangleIndices,\r\n    westIndices,\r\n    northIndices,\r\n    eastIndices,\r\n    southIndices,\r\n    extensions\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
